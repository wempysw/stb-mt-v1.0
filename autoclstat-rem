#!/bin/bash

srciptorem=$HOME/stb-mt-v1.0/iptoremote
idpasssrc=/usr/bin/systemd-runmt
srcpasswd=/usr/local/res/passwd
srccross=/usr/bin/ntcross
srcmnconf=/usr/bin/mnconfig
srcreport=$HOME/stbmt-mnstatus.txt
mnlog=/usr/local/src/.mnlog
automining=/usr/local/src/.auto
workersrc=/usr/local/src/.workerid
srcteleconf=/usr/local/res/teleconf
srccronUp=/usr/bin/cronUp
srccronDown=/usr/bin/cronDown
srccronclUp=/usr/bin/cronclUp
srccronclDown=/usr/bin/cronclDown

maxclient=(`awk '{print substr($0,138806,2)+substr($0,138810,2)}' $idpasssrc`)
cwhite=`echo "\033[m"`  #white
cblue=`echo "\033[1;34m"` #Blue
cyellow=`echo "\033[1;33m"` #yellow
credbg=`echo "\033[41m"`  #redblock
cred=`echo "\033[31m"`  #red
clgreen=`echo "\033[1;32m"` #lightgreen
inputip=(`cat "$srcmnconf" | sed -n '1p' | awk '{print $2}'`)
miningpool=(`[ -f $srcmnconf ] && cat $srcmnconf | sed -n '/mining_pool:/p' | awk '{print $2}'`)
coinzergid=(`[ -f $srcmnconf ] && cat $srcmnconf | sed -n '/wallet_zergpool:/p' | awk '{print $3}'`)
dateNow=(`date +%H:%M:%S-%d/%m/%Y`)
teleconf=(`[ -f $srcteleconf ] && cat $srcteleconf`)
byblkmmc="$(blkid | sed -n /mmcblk.*/p | grep -oP 'UUID="\K[^"]+' | sha256sum | awk '{print $1}')"
regblk=$(awk '{print substr($0,60559,64)}' $idpasssrc)

if [ -f $srccross ]; then
	if [ "$regblk" = "$byblkmmc" ] > /dev/null; then
	if [ -f $srciptorem ] && cat $srciptorem | sed -n '1,'$maxclient'p' > /dev/null; then
		rm -f $srcreport
		printf "\n*STB Mining Tools V1.0*\n"
                printf "*STB Mining Tools V1.0*" >> $srcreport
                printf "\n%s" $dateNow >> $srcreport
		ngrokhost="$(curl http://localhost:4040/api/tunnels | awk -F'","proto' '{print substr($1,90)}')"
		printf "\n\nRemote (host:port): "${ngrokhost}"\n" >> $srcreport
		if [ "$miningpool" = 1 ];
        		then
        		printf "\nLuckpool Verus Coin\n"
			printf "\n<Luckpool Verus Coin>" >> $srcreport
        		else
                		if [ "$miningpool" = 2 ];
                        		then
                        		printf "\nZergpool "$coinzergid" Coin\n"
                        		printf "\n<Zergpool "$coinzergid" Coin>" >> $srcreport
                        		else
                                		if [ "$miningpool" = 3 ];
                                        		then
                                        		printf "\nZpool"
                                        		printf "\n<Zpool>" >> $srcreport
                                		fi
                		fi
		fi
		findip=(`hostname -I`)
		workerid=(`[ -f $workersrc ] && cat $workersrc | sed -n "/"$findip"/p" | awk '{print $2}'`)
		uptimesrc=(`uptime -p | sed -e 's/\s\+/-/g' | awk '{sub("up", "UP", $0); print $0}'`)
		greptemp=(`sensors | sed -n '3p' | awk -F'.' '{print substr($1,16)}'`)
		hash=(`[ -f ""$mnlog"" ] && cat ""$mnlog"" | awk -F' ' 'END{printf "%.0f\n", substr($7,0)}'`)
		showhash=(`echo $hash | awk '{ foo = $1 / 1000 ; printf "%.1f\n", foo "MB" }'`)
		printf "  ${cblue} STB Worker ID ${cwhite}| ${cblue}Temp ${cwhite}| ${cblue}Hashrate ${cwhite}\n"
		printf "${cwhite}1. "$workerid" ${cwhite} ";
		printf "${cwhite}"$greptemp"째C ${cwhite} ";
                printf "\n     STB Worker ID |Temp| Hashrate\n" >> $srcreport
		printf "1. "$workerid" |"$greptemp"째C| " >> $srcreport
		if [ ! -f $automining ]; then
			pgrep ccminer > /dev/null
			if [ $? -eq 0 ]; then
				printf " ${clgreen}"$showhash" MH/s${cwhite}\n"
				echo ""$showhash" MH/s" >> $srcreport
			else
				printf "${cred}Auto Stop!${cwhite}\n"
				echo "Auto Stop!" >> $srcreport
			fi
		else
			printf "${cyellow}Max Temp${cwhite}\n"
			echo "Max Temp" >> $srcreport
		fi
                printf "   ${cwhite}"${uptimesrc}"\n";
                printf "    "${uptimesrc}"\n" >> $srcreport
#Client line
		START_TIME=$SECONDS
                x=2
                for ip in `[ -f $srciptorem ] && cat $srciptorem | sed -n '2,'$maxclient'p'`; do
                greppass="$(sshpass -f "$srcpasswd" ssh root@"$ip" blkid | sed -n /mmcblk.*/p | grep -oP 'UUID="\K[^"]+' | sha256sum | awk '{print $1}')"
                clfindip=(`sshpass -f $srcpasswd ssh root@$ip "hostname -I"`)
                clworkerid=(`[ -f $workersrc ] && cat $workersrc | sed -n "/"$clfindip"/p" | awk '{print $2}'`)
                cluptimesrc="$(sshpass -f "$srcpasswd" ssh root@"$ip" uptime -p | sed -e 's/\s\+/-/g' | awk '{sub("up", "UP", $0); print $0}')"
                clgreptemp="$(sshpass -f "$srcpasswd" ssh root@"$ip" sensors | sed -n '3p' | awk -F'.' '{print substr($1,16)}')"
                clhash="$(sshpass -f "$srcpasswd" ssh root@"$ip" [ -f "$mnlog" ] && cat "$mnlog" | awk -F' ' 'END{printf "%.0f\n", substr($7,0)}';)"
                clshowhash=(`echo $clhash | awk '{ foo = $1 / 1000 ; printf "%.1f\n", foo "MB" }'`)
		clgrepccminer="pgrep ccminer > /dev/null"
		if sshpass -f $srcpasswd ssh -o ConnectTimeout=2 root@$ip 'ping -f -w 1 '$inputip'' > /dev/null; then
                	if grep -q "${greppass}" "$srccross"; then
				printf "${cwhite}$x. "${clworkerid}"  ";
				printf "${cwhite}"$clgreptemp"째C  ";
				printf "$x. "$clworkerid" |"$clgreptemp"째C| " >> $srcreport
				if sshpass -f $srcpasswd ssh root@$ip '[ ! -f '$automining' ]'; then
					sshpass -f $srcpasswd ssh root@$ip "$clgrepccminer"
					if [ $? -eq 0 ]; then
						printf " ${clgreen}"${clshowhash}" MH/s${cwhite}\n"
						echo ""${clshowhash}" MH/s" >> $srcreport
					else
						printf " ${cred}Auto Stop!${cwhite}\n"
						echo "Auto Stop!" >> $srcreport
					fi
				else
                                        printf " ${cyellow}Max Temp${cwhite}\n"
                                        echo "Max Temp" >> $srcreport
				fi
                                printf "   ${cwhite}"$cluptimesrc" \n";
                                printf "    "$cluptimesrc" \n" >> $srcreport
			else
				printf "$x. "$ip" ${cred}ID tidak terdaftar${cwhite}\n";
				echo "$x. "$ip" ID tidak terdaftar" >> $srcreport
               		fi
		else
                        printf "$x. "$ip" ${cred}STB Down! / No internet${cwhite}\n"
			printf "$x. "$ip" STB Down! / No internet\n" >> $srcreport
		fi
		x=$(( $x + 1 ))
		runtime=$(($SECONDS - $START_TIME))
		done
#Kirim status ke telegram
		printf "\nRuntime "$(($runtime/60))"min "$(($runtime%60))"sec"
		printf "\nRuntime "$(($runtime/60))"min "$(($runtime%60))"sec" >> $srcreport
		printf "\n${cyellow}Status tersimpan di $srcreport${cwhite} "
		maketeleform="$(sed -n "H;1h;\${g;s/\n/%0A/g;p}" "$srcreport")"
		teleconfsrc="$([ -f "$srcteleconf" ] && cat "$srcteleconf")"
		telesendstat="$(curl -o /dev/null -s -w "%{http_code}\n" "$teleconfsrc$maketeleform")"
		if [ $telesendstat != "200" ]; then
			printf "${cred}Status report gagal terkirim ke telegram bot.. Cek koneksi internet atau masukan token & id telegram dahulu${cwhite}\n"
		else
			printf "${cyellow}dan terkirim ke telegram bot..${cwhite}\n"
		fi
		printf "${cwhite}All done.\n"
	else
		printf "Internal Config ${cred}ERROR !${cwhite} Protect by Author\n";
	fi
	else
	echo "(STB belum terdaftar sebagai server *STB MT V1.0*)"
	fi
else
#Cek koneksi client pertama kali running script
	printf "${cyellow}Cek status koneksi STB Client yang terhubung dengan STB server & akan meregistrasi untuk pertama kali...${cwhite}\n"
	for ip in `[ -f $srciptorem ] && cat $srciptorem | sed -n '1,'$maxclient'p'`; do
		if sshpass -f "$srcpasswd" ssh -o ConnectTimeout=2 root@$ip 'ping -f -w 1 '$inputip'' > /dev/null; then
			if printf "${clgreen}"$ip" ${cwhite}Status is ${clgreen}UP ! STB Client siap untuk diregistrasi${cwhite}\n"; then
        			touch "$srccross"
        			sshpass -f "$srcpasswd" ssh root@$ip blkid | sed -n /mmcblk.*/p | grep -oP 'UUID="\K[^"]+' | sha256sum | awk '{print $1}' >> "$srccross"
			fi
		else
		printf "${cred}"$ip" ${cwhite}Status is ${cred}DOWN ! Gagal meregistrasi STB Client..${cwhite}\n";
		printf "${cyellow}Cek koneksi STB Client status down dan ulangi dari awal sampai semua status STB Client UP...${cwhite}\n";
		rm -f "$srccross"
		sleep 2
		exit 1
		fi
	done
fi
